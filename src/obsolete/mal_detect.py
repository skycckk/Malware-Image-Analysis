# !!THIS IS AN OBSOLETE CODES!! NOT USED ANYMORE

import os
import pickle
import numpy as np
from os import listdir
from skimage import transform
from scipy.spatial.distance import cdist
from extract_features import project_h_edge
from quantizer import mask_feature
from quantizer import mask_features
from quantizer import cluster_feature

__author__ = "Wei-Chung Huang"
__copyright__ = "Copyright 2018, The SJSU MSCS Master project"
__license__ = "MIT"
__version__ = "1.0.0"


working_path = os.path.dirname(os.path.abspath(__file__))
cluster_folder_name = 'clustered_res'
feature_folder_name = 'extracted_feats'
saved_feature_path = working_path + '/../' + feature_folder_name
saved_cluster_path = working_path + '/../' + cluster_folder_name
n_families = 2

def detect():
    pass


def robush_hash(reduced_feat, keys):
    malware_cnt = 0
    benign_cnt = 0
    min_dist_b = float('inf')
    min_dist_m = float('inf')
    match_fit = -1
    for i in range(len(keys)):
        key = keys[i]
        centroids_, distortion_ = cluster_feature(reduced_feat, key['k'])
        centroids_ = centroids_.reshape(len(centroids_), -1)
        dist = cdist(key['centroid'], centroids_, 'euclidean')
        code = dist.argmin(axis=1)
        min_dist_list = dist[np.arange(len(code)), code]
        avg_min_dist = min_dist_list.mean(axis=-1)

        if avg_min_dist < key['threshold']:
            malware_cnt += 1
            dist_key = key['threshold'] - avg_min_dist
            if dist_key < min_dist_m:
                min_dist_m = dist_key
                match_fit = i
        else:
            benign_cnt += 1
            dist_key = avg_min_dist - key['threshold']
            if dist_key < min_dist_b:
                min_dist_b = dist_key

    # print('benign', min_dist_b, 'malware', min_dist_m, 'match_fit', match_fit)
    # if min_dist_m < min_dist_b:
    #     return True, match_fit
    # else:
    #     return False, match_fit

    if malware_cnt > benign_cnt:
        return True, match_fit
    else:
        return False, match_fit


def robust_hash(img, keys):
    # Feature 1: horizontal edge: 1 x 256
    smooth_radius = 3
    hist_size = 256
    # original setting: 9 and 256
    # tuned setting: 3 and 64
    hist = project_h_edge(img, gauss_sigma=smooth_radius, print_img=False, total_blocks=hist_size)

    # resize to desired length. e.g. 256
    hist_arr = np.array(hist).reshape(1, len(hist))
    feat_vec = transform.resize(hist_arr, (1, hist_size), mode='reflect').tolist()[0]

    reduced_feat = mask_feature(feat_vec)

    # key = get_key()
    malware_cnt = 0
    benign_cnt = 0
    for key in keys:
        centroids_, distortion_ = cluster_feature(reduced_feat, key['k'])
        centroids_ = centroids_.reshape(len(centroids_), -1)
        dist = cdist(key['centroid'], centroids_, 'euclidean')
        code = dist.argmin(axis=1)
        min_dist_list = dist[np.arange(len(code)), code]
        avg_min_dist = min_dist_list.mean(axis=-1)

        if avg_min_dist < key['threshold']:
            malware_cnt += 1
        else:
            benign_cnt += 1

    if malware_cnt > benign_cnt:
        return True
    else:
        return False


def get_key_set():
    """
    Acquire whole keys for each families
    :return:
    """
    keys = [0] * n_families
    for i in range(n_families):
        keys[i] = get_key(i)

    return keys


def get_key(fam_index):
    """
    Acquire the key of each family
    :param fam_index:
    :return:
    """
    # assume getting family 0
    with open(saved_cluster_path + '/f1_fam_' + str(fam_index) + '_validation', 'rb') as fp:
        key_dict = pickle.load(fp)
    k = key_dict['k']

    with open('../clustered_res/f1_fam_' + str(fam_index) + '_codebook', 'rb') as fp:
        codebook = pickle.load(fp)

    centroid = codebook[k]['centroid']
    threshold = codebook[k]['threshold']

    key = dict()
    key['k'] = k
    key['centroid'] = centroid
    key['threshold'] = threshold

    return key


def test():
    benign_path = '../dataset_benign/images/'
    files = listdir(benign_path)
    n_benign = len(files)
    accuracy = 0
    cnt = 1
    keys = get_key_set()

    # # testing on benign
    # for fname in files:
    #     print(cnt, '/', n_benign, sep='')
    #     cnt += 1
    #     img = io.imread(benign_path + fname, as_grey=True)
    #
    #     is_malware = robust_hash(img, keys)
    #     if not is_malware:
    #         accuracy += 1
    #         print(fname)

    n_benign = 0
    benign_set_name = 'benign_features'
    feature_mat_benign = mask_features(benign_set_name)
    for feature in feature_mat_benign:
        n_benign += 1
        is_malware, match_fit = robush_hash(feature, keys)
        if not is_malware:
            accuracy += 1

    accuracy = accuracy / n_benign * 100
    print('*' * 10, 'benign accuracy:', accuracy, 'total samples', n_benign, '*' * 10)

    # testing on malware
    accuracy = 0
    n_malware = 0
    for i in range(n_families):
        print('[testing-k] family:', i, '...')
        f1_fam_name = 'f1_fam_' + str(i) + '_features'
        feature_mat = mask_features(f1_fam_name)

        # use first 10% of samples as training set
        feature_mat = feature_mat[:20, :]

        family_accuracy = 0
        family_cnt = 0
        for feature in feature_mat:
            n_malware += 1
            family_cnt += 1
            is_malware, match_fit = robush_hash(feature, keys)
            if is_malware:
                accuracy += 1
                if match_fit == i:
                    family_accuracy += 1
        if family_accuracy > 0:
            family_accuracy = family_accuracy / family_cnt * 100
        else:
            family_accuracy = 0
        print('family accuracy:', family_accuracy)

    accuracy = accuracy / n_malware * 100
    print('*' * 10, 'malware accuracy:', accuracy, 'total samples', n_malware, '*' * 10)


if __name__ == '__main__':
    test()
