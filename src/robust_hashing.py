from hamming_code import *
from extract_features import frequency_feature
from scipy.misc import imread
from numpy import uint16
from numpy import uint8


class RobustHashing:
    def __init__(self):
        pass

    def hash_with_hamming_decode(self, img):
        """
        Hash an image with 1. extracting features 2. using Hamming decoder to decode
        :param img: An 2D one channel input image.
        :return: A list of decoded integers
        """
        feature_vec = frequency_feature(img)
        coder = HammingCode74()
        hash_val = list()
        for val in feature_vec:
            dword = uint16(val)
            dword_hi = uint8(dword >> 8)
            dword_lo = uint8(dword & 0x00ff)
            decoded_hi = coder.decode(dword_hi)
            decoded_lo = coder.decode(dword_lo)

            hash_val.append((decoded_hi << 8) | decoded_lo)

        return hash_val


if __name__ == '__main__':
    print('Example:')
    img = imread('../dataset/Adialer.C/00bb6b6a7be5402fcfce453630bfff19.png').astype(float)
    rbh = RobustHashing()
    hashed = rbh.hash_with_hamming_decode(img)
    print(hashed)
