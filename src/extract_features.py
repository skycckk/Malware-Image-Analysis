from skimage import filters
from skimage import img_as_float
import matplotlib.pyplot as plt
import numpy as np


def project_h_edge(img, gauss_sigma=1, print_img=False):
    """
    Project horizontal edges vertically by processing an h_sobel operation followed by gaussian blur
    :param img: input gray image (0~255)
    :param gauss_sigma: sigma in gaussian distribution w.r.t. blurness
    :param print_img: print debug images
    :return:
    """
    img_height, img_width = img.shape[0], img.shape[1]
    img = img_as_float(img)
    blurred = filters.gaussian(img, gauss_sigma)
    edge_map = filters.sobel_h(blurred)

    if print_img is True:
        dump_images(img, blurred, edge_map)

    hist = [0] * img_height
    peak_val = 0
    for i in range(img_height):
        for j in range(img_width):
            hist[i] += abs(edge_map[i][j])
        if hist[i] > peak_val:
            peak_val = hist[i]

    for i in range(img_height):
        hist[i] /= peak_val

    return hist


def dump_images(img, blur_img, edge_map):
    abs_edge_map = np.abs(edge_map)
    max_edge = np.max(abs_edge_map)
    new_edge_map = (abs_edge_map * 255) / max_edge
    fig = plt.figure()
    ax1 = fig.add_subplot(131)
    ax2 = fig.add_subplot(132)
    ax3 = fig.add_subplot(133)
    ax1.set_title("source")
    ax2.set_title("blurred")
    ax3.set_title("edge map")
    ax1.imshow(img, cmap="gray")
    ax2.imshow(blur_img, cmap="gray")
    ax3.imshow(new_edge_map, cmap="gray")
    plt.tight_layout()
    plt.show()